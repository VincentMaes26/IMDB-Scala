[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Vince\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Vince\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.0 (Oracle Corporation Java 14.0.2)
[debug]       Load.loadUnit: plugins took 141.391ms
[debug]       Load.loadUnit: defsScala took 0.6299ms
[debug] [Loading] Scanning directory C:\Users\Vince\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Vince\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 48.8292 ms
[debug]           Load.resolveProject(global-plugins) took 84.6129ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Vince\.sbt\1.0\plugins, plugins: List(<none>))) took 170.5229ms
[debug] [Loading] Done in C:\Users\Vince\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 212.0826ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.6137ms
[debug]     Load.loadUnit(file:/C:/Users/Vince/.sbt/1.0/plugins/, ...) took 372.3695ms
[debug]   Load.apply: load took 691.483ms
[debug]   Load.apply: resolveProjects took 11.1325ms
[debug]   Load.apply: finalTransforms took 102.3559ms
[debug]   Load.apply: config.delegates took 11.3234ms
[debug]   Load.apply: Def.make(settings)... took 4085.6005ms
[debug]   Load.apply: structureIndex took 111.0535ms
[debug]   Load.apply: mkStreams took 2.2523ms
[info] loading global plugins from C:\Users\Vince\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6970.0418ms
[debug]           Load.loadUnit: plugins took 28.1178ms
[debug]           Load.loadUnit: defsScala took 0.005ms
[debug] [Loading] Scanning directory D:\dev\scala\ImdbProject\project
[debug]             Load.loadUnit: mkEval took 31.3319ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\dev\scala\ImdbProject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.5154 ms
[info] loading settings for project imdbproject-build from idea.sbt ...
[debug]               Load.resolveProject(imdbproject-build) took 12.1277ms
[debug]             Load.loadTransitive: finalizeProject(Project(id imdbproject-build, base: D:\dev\scala\ImdbProject\project, plugins: List(<none>))) took 17.0436ms
[debug] [Loading] Done in D:\dev\scala\ImdbProject\project, returning: (imdbproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3158.1332ms
[debug]           Load.loadUnit: cleanEvalClasses took 18.0219ms
[debug]         Load.loadUnit(file:/D:/dev/scala/ImdbProject/project/, ...) took 3205.988ms
[debug]       Load.apply: load took 3208.6552ms
[debug]       Load.apply: resolveProjects took 0.5818ms
[debug]       Load.apply: finalTransforms took 30.4307ms
[debug]       Load.apply: config.delegates took 1.0445ms
[debug]       Load.apply: Def.make(settings)... took 163.6459ms
[debug]       Load.apply: structureIndex took 50.6062ms
[debug]       Load.apply: mkStreams took 0.003ms
[info] loading project definition from D:\dev\scala\ImdbProject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 6219.667ms
[debug]     Load.loadUnit: defsScala took 0.0033ms
[debug] [Loading] Scanning directory D:\dev\scala\ImdbProject
[debug]       Load.loadUnit: mkEval took 0.2854ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\dev\scala\ImdbProject, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.2791 ms
[info] loading settings for project imdbproject from build.sbt ...
[debug]         Load.resolveProject(imdbproject) took 26.6929ms
[debug]       Load.loadTransitive: finalizeProject(Project(id imdbproject, base: D:\dev\scala\ImdbProject, plugins: List(<none>))) took 30.2904ms
[debug] [Loading] Done in D:\dev\scala\ImdbProject, returning: (imdbproject)
[debug]     Load.loadUnit: loadedProjectsRaw took 1677.7076ms
[debug]     Load.loadUnit: cleanEvalClasses took 29.2592ms
[debug]   Load.loadUnit(file:/D:/dev/scala/ImdbProject/, ...) took 7927.4676ms
[debug] Load.apply: load took 7928.8528ms
[debug] Load.apply: resolveProjects took 0.0874ms
[debug] Load.apply: finalTransforms took 23.9579ms
[debug] Load.apply: config.delegates took 0.2608ms
[debug] Load.apply: Def.make(settings)... took 58.8549ms
[debug] Load.apply: structureIndex took 24.8294ms
[debug] Load.apply: mkStreams took 0.0033ms
[info] set current project to ImdbProject (in build file:/D:/dev/scala/ImdbProject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 54339 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 54339, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ImdbProject (in build file:/D:/dev/scala/ImdbProject/)
[debug] > Exec(idea-shell, None, None)
